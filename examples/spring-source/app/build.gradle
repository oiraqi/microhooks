/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.2/userguide/building_java_projects.html
 */

buildscript {
    dependencies {
        classpath files('../../../builder/lib/build/libs/microhooks-builder.jar')
    }
}

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'org.springframework.boot' version '3.1.1'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'net.bytebuddy.byte-buddy-gradle-plugin' version '1.14.5'
    id 'org.sonarqube' version '4.3.0.3225'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13.2'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'

    compileOnly 'org.projectlombok:lombok:1.18.22'
	annotationProcessor 'org.projectlombok:lombok:1.18.22'

    implementation files('../../../core/lib/build/libs/microhooks.jar')
    implementation files('../../../containers/spring/lib/build/libs/microhooks-spring.jar')
    implementation files('../../../brokers/kafka/lib/build/libs/microhooks-kafka.jar')

    implementation 'commons-beanutils:commons-beanutils:1.9.4'

    //implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.boot:spring-boot-starter-aop:2.6.2'

    implementation 'org.apache.kafka:kafka-clients:2.4.0'

    runtimeOnly 'com.h2database:h2:1.3.148'

}

application {
    // Define the main class for the application.
    mainClass = 'io.microhooks.examples.spring.SourceMicroservice'
}

byteBuddy {
  transformation {
    plugin = io.microhooks.builder.Builder.class
  }
}

sonar {
  properties {
    property("sonar.projectKey", "spring-source")
    property("sonar.organization", "Microhooks")
    property("sonar.host.url", "http://localhost:9000")
  }
}
